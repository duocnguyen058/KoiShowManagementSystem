// <auto-generated />
using System;
using KoiShowManagementSystem.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiShowManagementSystem.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241116053923_InitDBv5")]
    partial class InitDBv5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Event_Koi_Participation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("KoiId")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("EventsId");

                    b.HasIndex("KoiId");

                    b.ToTable("Event_Koi_Participations");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.JudgeAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventsId");

                    b.HasIndex("UsersId");

                    b.ToTable("JudgeAssignments");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Koi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Size")
                        .HasColumnType("real");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<string>("Variety")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("Kois");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Reports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<string>("ReportData")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EventsId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Scores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("ColorScore")
                        .HasColumnType("real");

                    b.Property<int>("Event_Koi_ParticipationId")
                        .HasColumnType("int");

                    b.Property<float>("PatternScore")
                        .HasColumnType("real");

                    b.Property<float>("ShapeScore")
                        .HasColumnType("real");

                    b.Property<float>("TotalScore")
                        .HasColumnType("real");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Event_Koi_ParticipationId");

                    b.HasIndex("UsersId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Event_Koi_Participation", b =>
                {
                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Koi", "Kois")
                        .WithMany()
                        .HasForeignKey("KoiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Events");

                    b.Navigation("Kois");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.JudgeAssignments", b =>
                {
                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Koi", b =>
                {
                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Reports", b =>
                {
                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Events", "Events")
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Events");
                });

            modelBuilder.Entity("KoiShowManagementSystem.Repositories.Entity.Scores", b =>
                {
                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Event_Koi_Participation", "Event_Koi_Participations")
                        .WithMany()
                        .HasForeignKey("Event_Koi_ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiShowManagementSystem.Repositories.Entity.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event_Koi_Participations");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
